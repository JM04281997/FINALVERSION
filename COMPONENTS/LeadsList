import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { format } from "date-fns";
import { Phone, MapPin, DollarSign, Calendar, User } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";

const statusColors = {
  new: "bg-blue-100 text-blue-800 border-blue-200",
  assigned: "bg-yellow-100 text-yellow-800 border-yellow-200",
  contacted: "bg-purple-100 text-purple-800 border-purple-200",
  closed: "bg-green-100 text-green-800 border-green-200",
  not_closed: "bg-red-100 text-red-800 border-red-200",
  credit_fail: "bg-orange-100 text-orange-800 border-orange-200",
  install_scheduled: "bg-indigo-100 text-indigo-800 border-indigo-200",
  installed: "bg-emerald-100 text-emerald-800 border-emerald-200"
};

const priorityColors = {
  low: "bg-gray-100 text-gray-800",
  medium: "bg-blue-100 text-blue-800",
  high: "bg-orange-100 text-orange-800",
  urgent: "bg-red-100 text-red-800"
};

export default function LeadsList({ leads, onSelectLead, onUpdateLead, isLoading, currentUser }) {
  const canUpdateStatus = (lead) => {
    return currentUser?.role === 'admin' || 
           currentUser?.role === 'closer' && lead.assigned_to === currentUser?.email;
  };

  const handleStatusChange = (lead, newStatus) => {
    onUpdateLead(lead.id, { status: newStatus });
  };

  if (isLoading) {
    return (
      <Card className="shadow-lg border-0">
        <CardHeader>
          <CardTitle>Leads</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {Array(5).fill(0).map((_, i) => (
              <div key={i} className="p-4 border rounded-lg">
                <Skeleton className="h-5 w-48 mb-2" />
                <Skeleton className="h-4 w-32 mb-2" />
                <Skeleton className="h-4 w-24" />
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow-lg border-0">
      <CardHeader>
        <CardTitle className="text-xl font-semibold">
          Leads ({leads.length})
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {leads.length === 0 ? (
            <div className="text-center py-12 text-gray-500">
              <User className="w-16 h-16 mx-auto mb-4 text-gray-300" />
              <p className="text-lg">No leads found</p>
              <p className="text-sm">Try adjusting your search or filters</p>
            </div>
          ) : (
            leads.map((lead) => (
              <div 
                key={lead.id} 
                className="p-4 border rounded-lg hover:shadow-md transition-all cursor-pointer"
                onClick={() => onSelectLead(lead)}
              >
                <div className="flex justify-between items-start mb-3">
                  <div>
                    <h3 className="font-semibold text-gray-900">
                      {lead.first_name} {lead.last_name}
                    </h3>
                    <p className="text-sm text-gray-600 flex items-center gap-1 mt-1">
                      <Phone className="w-4 h-4" />
                      {lead.phone}
                    </p>
                  </div>
                  <div className="flex gap-2 flex-wrap">
                    <Badge className={statusColors[lead.status]}>
                      {lead.status.replace('_', ' ')}
                    </Badge>
                    <Badge className={priorityColors[lead.priority]}>
                      {lead.priority}
                    </Badge>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600 mb-3">
                  <div className="flex items-center gap-1">
                    <MapPin className="w-4 h-4" />
                    <span className="truncate">{lead.address}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <DollarSign className="w-4 h-4" />
                    <span>${lead.monthly_electric_bill || 0}/mo</span>
                  </div>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-xs text-gray-500">
                    <Calendar className="w-3 h-3 inline mr-1" />
                    {format(new Date(lead.created_date), 'MMM d, yyyy')}
                  </span>
                  
                  {canUpdateStatus(lead) && (
                    <div className="flex gap-2" onClick={(e) => e.stopPropagation()}>
                      <Select
                        value={lead.status}
                        onValueChange={(value) => handleStatusChange(lead, value)}
                      >
                        <SelectTrigger className="w-32 h-8 text-xs">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="new">New</SelectItem>
                          <SelectItem value="assigned">Assigned</SelectItem>
                          <SelectItem value="contacted">Contacted</SelectItem>
                          <SelectItem value="closed">Closed</SelectItem>
                          <SelectItem value="not_closed">Not Closed</SelectItem>
                          <SelectItem value="credit_fail">Credit Fail</SelectItem>
                          <SelectItem value="install_scheduled">Install Scheduled</SelectItem>
                          <SelectItem value="installed">Installed</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  )}
                </div>
              </div>
            ))
          )}
        </div>
      </CardContent>
    </Card>
  );
}