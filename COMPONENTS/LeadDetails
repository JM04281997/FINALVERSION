import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { format } from "date-fns";
import { 
  Phone, 
  Mail, 
  MapPin, 
  DollarSign, 
  Calendar, 
  User,
  Edit,
  Save,
  X
} from "lucide-react";

export default function LeadDetails({ lead, onUpdateLead, currentUser }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editData, setEditData] = useState({});

  if (!lead) {
    return (
      <Card className="shadow-lg border-0">
        <CardContent className="p-12 text-center">
          <User className="w-16 h-16 mx-auto mb-4 text-gray-300" />
          <p className="text-gray-500">Select a lead to view details</p>
        </CardContent>
      </Card>
    );
  }

  const handleEdit = () => {
    setEditData({
      closer_notes: lead.closer_notes || "",
      contract_value: lead.contract_value || "",
      install_date: lead.install_date || "",
      commission_rate: lead.commission_rate || "",
      assigned_to: lead.assigned_to || ""
    });
    setIsEditing(true);
  };

  const handleSave = () => {
    const updates = {
      ...editData,
      contract_value: editData.contract_value ? parseFloat(editData.contract_value) : null,
      commission_rate: editData.commission_rate ? parseFloat(editData.commission_rate) : null,
      commission_amount: editData.contract_value && editData.commission_rate 
        ? (parseFloat(editData.contract_value) * parseFloat(editData.commission_rate)) / 100
        : null
    };
    
    onUpdateLead(lead.id, updates);
    setIsEditing(false);
  };

  const handleCancel = () => {
    setIsEditing(false);
    setEditData({});
  };

  const statusColors = {
    new: "bg-blue-100 text-blue-800 border-blue-200",
    assigned: "bg-yellow-100 text-yellow-800 border-yellow-200",
    contacted: "bg-purple-100 text-purple-800 border-purple-200",
    closed: "bg-green-100 text-green-800 border-green-200",
    not_closed: "bg-red-100 text-red-800 border-red-200",
    credit_fail: "bg-orange-100 text-orange-800 border-orange-200",
    install_scheduled: "bg-indigo-100 text-indigo-800 border-indigo-200",
    installed: "bg-emerald-100 text-emerald-800 border-emerald-200"
  };

  const priorityColors = {
    low: "bg-gray-100 text-gray-800",
    medium: "bg-blue-100 text-blue-800",
    high: "bg-orange-100 text-orange-800",
    urgent: "bg-red-100 text-red-800"
  };

  return (
    <Card className="shadow-lg border-0">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="text-xl font-semibold">
              {lead.first_name} {lead.last_name}
            </CardTitle>
            <p className="text-sm text-gray-500 mt-1">
              Created {format(new Date(lead.created_date), 'MMM d, yyyy')}
            </p>
          </div>
          <div className="flex gap-2">
            <Badge className={statusColors[lead.status]}>
              {lead.status.replace('_', ' ')}
            </Badge>
            <Badge className={priorityColors[lead.priority]}>
              {lead.priority}
            </Badge>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Contact Information */}
        <div className="space-y-3">
          <h3 className="font-semibold text-gray-900">Contact Information</h3>
          <div className="space-y-2">
            <div className="flex items-center gap-2 text-sm">
              <Phone className="w-4 h-4 text-gray-500" />
              <span>{lead.phone}</span>
            </div>
            {lead.email && (
              <div className="flex items-center gap-2 text-sm">
                <Mail className="w-4 h-4 text-gray-500" />
                <span>{lead.email}</span>
              </div>
            )}
            <div className="flex items-center gap-2 text-sm">
              <MapPin className="w-4 h-4 text-gray-500" />
              <span>{lead.address}</span>
            </div>
          </div>
        </div>

        {/* Property Details */}
        <div className="space-y-3">
          <h3 className="font-semibold text-gray-900">Property Details</h3>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-gray-500">Monthly Bill:</span>
              <p className="font-medium">${lead.monthly_electric_bill || 0}</p>
            </div>
            <div>
              <span className="text-gray-500">Roof Type:</span>
              <p className="font-medium capitalize">{lead.roof_type || 'N/A'}</p>
            </div>
            <div>
              <span className="text-gray-500">Ownership:</span>
              <p className="font-medium capitalize">{lead.home_ownership || 'N/A'}</p>
            </div>
            <div>
              <span className="text-gray-500">Credit Score:</span>
              <p className="font-medium">{lead.credit_score_range || 'N/A'}</p>
            </div>
          </div>
        </div>

        {/* Business Information */}
        <div className="space-y-3">
          <div className="flex justify-between items-center">
            <h3 className="font-semibold text-gray-900">Business Information</h3>
            {(currentUser?.role === 'admin' || currentUser?.role === 'closer') && (
              <Button
                size="sm"
                variant="outline"
                onClick={isEditing ? handleSave : handleEdit}
                className="flex items-center gap-2"
              >
                {isEditing ? (
                  <>
                    <Save className="w-4 h-4" />
                    Save
                  </>
                ) : (
                  <>
                    <Edit className="w-4 h-4" />
                    Edit
                  </>
                )}
              </Button>
            )}
          </div>
          
          <div className="space-y-4">
            {isEditing ? (
              <>
                <div>
                  <Label htmlFor="assigned_to" className="text-sm font-medium">
                    Assigned Closer
                  </Label>
                  <Input
                    id="assigned_to"
                    value={editData.assigned_to}
                    onChange={(e) => setEditData({...editData, assigned_to: e.target.value})}
                    placeholder="Enter closer email"
                    className="mt-1"
                  />
                </div>
                <div>
                  <Label htmlFor="contract_value" className="text-sm font-medium">
                    Contract Value ($)
                  </Label>
                  <Input
                    id="contract_value"
                    type="number"
                    value={editData.contract_value}
                    onChange={(e) => setEditData({...editData, contract_value: e.target.value})}
                    placeholder="Enter contract value"
                    className="mt-1"
                  />
                </div>
                <div>
                  <Label htmlFor="commission_rate" className="text-sm font-medium">
                    Commission Rate (%)
                  </Label>
                  <Input
                    id="commission_rate"
                    type="number"
                    value={editData.commission_rate}
                    onChange={(e) => setEditData({...editData, commission_rate: e.target.value})}
                    placeholder="Enter commission rate"
                    className="mt-1"
                  />
                </div>
                <div>
                  <Label htmlFor="install_date" className="text-sm font-medium">
                    Install Date
                  </Label>
                  <Input
                    id="install_date"
                    type="date"
                    value={editData.install_date}
                    onChange={(e) => setEditData({...editData, install_date: e.target.value})}
                    className="mt-1"
                  />
                </div>
                <div>
                  <Label htmlFor="closer_notes" className="text-sm font-medium">
                    Closer Notes
                  </Label>
                  <Textarea
                    id="closer_notes"
                    value={editData.closer_notes}
                    onChange={(e) => setEditData({...editData, closer_notes: e.target.value})}
                    placeholder="Add notes about this lead..."
                    className="mt-1"
                  />
                </div>
                <div className="flex gap-2">
                  <Button onClick={handleSave} className="flex-1">
                    <Save className="w-4 h-4 mr-2" />
                    Save Changes
                  </Button>
                  <Button variant="outline" onClick={handleCancel}>
                    <X className="w-4 h-4 mr-2" />
                    Cancel
                  </Button>
                </div>
              </>
            ) : (
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-gray-500">Assigned To:</span>
                  <p className="font-medium">{lead.assigned_to || 'Unassigned'}</p>
                </div>
                <div>
                  <span className="text-gray-500">Contract Value:</span>
                  <p className="font-medium">${lead.contract_value?.toLocaleString() || 'N/A'}</p>
                </div>
                <div>
                  <span className="text-gray-500">Commission Rate:</span>
                  <p className="font-medium">{lead.commission_rate || 'N/A'}%</p>
                </div>
                <div>
                  <span className="text-gray-500">Install Date:</span>
                  <p className="font-medium">
                    {lead.install_date ? format(new Date(lead.install_date), 'MMM d, yyyy') : 'N/A'}
                  </p>
                </div>
                <div className="col-span-2">
                  <span className="text-gray-500">Notes:</span>
                  <p className="font-medium">{lead.closer_notes || 'No notes added'}</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}