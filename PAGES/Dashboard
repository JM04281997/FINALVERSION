import React, { useState, useEffect } from "react";
import { Lead } from "@/entities/Lead";
import { User } from "@/entities/User";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  TrendingUp, 
  Users, 
  DollarSign, 
  Calendar,
  ArrowRight,
  Phone,
  MapPin
} from "lucide-react";

import DashboardStats from "../components/dashboard/DashboardStats";
import RecentLeads from "../components/dashboard/RecentLeads";
import LeadsPipeline from "../components/dashboard/LeadsPipeline";
import UpcomingTasks from "../components/dashboard/UpcomingTasks";

export default function Dashboard() {
  const [leads, setLeads] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    try {
      const [leadsData, userData] = await Promise.all([
        Lead.list("-created_date"),
        User.me()
      ]);
      setLeads(leadsData);
      setCurrentUser(userData);
    } catch (error) {
      console.error("Error loading dashboard data:", error);
    }
    setIsLoading(false);
  };

  const getFilteredLeads = () => {
    if (currentUser?.role === 'closer') {
      return leads.filter(lead => lead.assigned_to === currentUser.email);
    }
    return leads;
  };

  const getWelcomeMessage = () => {
    const hour = new Date().getHours();
    if (hour < 12) return "Good morning";
    if (hour < 18) return "Good afternoon";
    return "Good evening";
  };

  return (
    <div className="p-6 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Welcome Header */}
        <div className="mb-8">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                {getWelcomeMessage()}, {currentUser?.full_name?.split(' ')[0] || 'User'}
              </h1>
              <p className="text-gray-600 text-lg">
                {currentUser?.role === 'setter' && "Ready to capture new leads today?"}
                {currentUser?.role === 'closer' && "Your pipeline is waiting for your expertise"}
                {currentUser?.role === 'installer' && "Let's get solar systems installed"}
                {currentUser?.role === 'admin' && "Overview of your solar sales operation"}
              </p>
            </div>
            <div className="flex gap-3">
              <Link to={createPageUrl("NewLead")}>
                <Button className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white shadow-lg">
                  <Users className="w-4 h-4 mr-2" />
                  New Lead
                </Button>
              </Link>
              <Link to={createPageUrl("Leads")}>
                <Button variant="outline" className="border-gray-300 hover:bg-gray-50">
                  View All Leads
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </Link>
            </div>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <DashboardStats 
            leads={getFilteredLeads()} 
            currentUser={currentUser}
            isLoading={isLoading}
          />
        </div>

        {/* Main Content Grid */}
        <div className="grid lg:grid-cols-3 gap-6">
          {/* Left Column - 2/3 width */}
          <div className="lg:col-span-2 space-y-6">
            <LeadsPipeline leads={getFilteredLeads()} isLoading={isLoading} />
            <RecentLeads leads={getFilteredLeads()} isLoading={isLoading} />
          </div>

          {/* Right Column - 1/3 width */}
          <div className="space-y-6">
            <UpcomingTasks leads={getFilteredLeads()} isLoading={isLoading} />
            
            {/* Quick Actions */}
            <Card className="shadow-lg border-0">
              <CardHeader className="pb-3">
                <CardTitle className="text-lg font-semibold">Quick Actions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Link to={createPageUrl("NewLead")} className="block">
                  <Button variant="outline" className="w-full justify-start">
                    <Users className="w-4 h-4 mr-2" />
                    Add New Lead
                  </Button>
                </Link>
                <Link to={createPageUrl("Calendar")} className="block">
                  <Button variant="outline" className="w-full justify-start">
                    <Calendar className="w-4 h-4 mr-2" />
                    Schedule Install
                  </Button>
                </Link>
                <Link to={createPageUrl("Commission")} className="block">
                  <Button variant="outline" className="w-full justify-start">
                    <DollarSign className="w-4 h-4 mr-2" />
                    View Commission
                  </Button>
                </Link>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}